import json
import os
import random
from datetime import datetime
from models.models import Joueur, Tournoi, Tour, Match
from view.view import View

class Controller:
    def __init__(self, model, view):
        self.model = model
        self.view = view
        self.joueurs_path = os.path.join('data', 'Données_des_Participants.json')
        self.tournois_path = os.path.join('data', 'tournois.json')
        # Assurez-vous que les dossiers existent
        os.makedirs(os.path.dirname(self.joueurs_path), exist_ok=True)
        os.makedirs(os.path.dirname(self.tournois_path), exist_ok=True)

    def run(self):
        while True:
            self.view.afficher_menu_principal()
            choix = input("Entrez le numéro de votre choix : ")
            
            if choix == "1":
                self.creer_tournoi()
            elif choix == "2":
                self.ajouter_joueur()
            elif choix == "3":
                self.afficher_tous_les_joueurs()
            elif choix == "4":
                self.afficher_tous_les_tournois()
            elif choix == "5":
                self.lancer_tournoi()
            elif choix == "6":
                self.view.afficher_message("Merci d'avoir utilisé l'application de gestion des tournois d'échecs ! Au revoir !")
                break
            else:
                self.view.afficher_erreur("Choix invalide. Veuillez entrer un numéro valide.")
                
    def creer_tournoi(self):
     self.view.afficher_message("Création d'un nouveau tournoi")
     nom = input("Nom du tournoi : ")
     lieu = input("Lieu du tournoi : ")
     date_debut = datetime.strptime(input("Date de début (format JJ/MM/AAAA) : "), '%d/%m/%Y')
     date_fin = datetime.strptime(input("Date de fin (format JJ/MM/AAAA) : "), '%d/%m/%Y')
     description = input("Description du tournoi : ")
     nombre_tours = 4  # Exemple : 4 tours, vous pouvez le rendre dynamique si nécessaire

     tournoi = Tournoi(nom, lieu, date_debut, date_fin, nombre_tours, description)

    # Affichage et ajout des joueurs
     joueurs_disponibles = self.charger_joueurs_inscrits()  # Correction ici
     self.view.afficher_message("Joueurs disponibles pour inscription :")
     for joueur in joueurs_disponibles:
        self.view.afficher_joueur_disponible(joueur)

     while True:
        matricule = input("Entrez le matricule du joueur à ajouter (ou '0' pour arrêter d'ajouter des joueurs) : ")
        if matricule == '0':
            break
        joueur = next((j for j in joueurs_disponibles if j['matricule'] == matricule), None)
        if joueur:
            tournoi.ajouter_joueur(Joueur.from_dict(joueur))
        else:
            self.view.afficher_erreur("Joueur non trouvé.")

     self.enregistrer_tournoi(tournoi.to_dict())
     self.view.afficher_message("Tournoi créé avec succès.")

    def ajouter_joueur(self):
        nom, prenom, date_naissance, matricule = self.view.saisir_joueur()
        joueur = Joueur(nom, prenom, date_naissance, matricule)
        self.enregistrer_joueur(joueur)
        self.view.afficher_message(f"Joueur {prenom} {nom} ajouté avec succès!")

    def afficher_tous_les_joueurs(self):
        joueurs = self.charger_joueurs_inscrits()
        self.view.afficher_tous_les_joueurs(joueurs)

    def afficher_tous_les_tournois(self):
        tournois = self.charger_tous_les_tournois()
        self.view.afficher_tous_les_tournois(tournois)

    def lancer_tournoi(self):
        tournois = self.charger_tous_les_tournois()
        self.view.afficher_tous_les_tournois(tournois)

        nom_tournoi = input("Entrez le nom du tournoi à lancer : ")
        tournoi_data = next((t for t in tournois if t['nom'] == nom_tournoi), None)

        if tournoi_data:
            tournoi_obj = Tournoi.from_dict(tournoi_data)
            self.view.afficher_message(f"Lancement du tournoi : {tournoi_obj.nom}")

            if len(tournoi_obj.tours) == 0:
                # Mélanger les joueurs avant de commencer le premier tour
                joueurs_melanges = tournoi_obj.joueurs_inscrits[:]
                random.shuffle(joueurs_melanges)
                self.view.afficher_message("Joueurs mélangés :")
                for joueur in joueurs_melanges:
                    self.view.afficher_joueur_disponible(joueur.to_dict())
                    
                # Commencer le premier tour avec les joueurs mélangés
                tour = Tour("Tour 1", joueurs_melanges)
                tour.commencer()
                tournoi_obj.ajouter_tour(tour)
                self.enregistrer_tournoi(tournoi_obj.to_dict())
                self.view.afficher_message("=== Matchs du premier tour ===")
                for match in tour.matchs:
                    self.view.afficher_match(tour.nom, match.joueur1, match.joueur2)
            else:
                # Reprendre le tournoi en cours
                dernier_tour = tournoi_obj.tours[-1]

                # Vérifiez si tous les matchs du dernier tour ont un résultat
                if all(match.resultat is not None for match in dernier_tour.matchs):
                    # Créer un nouveau tour si le précédent est terminé
                    self.view.afficher_message("Tous les matchs du dernier tour sont terminés. Création d'un nouveau tour.")
                    joueurs_melanges = tournoi_obj.joueurs_inscrits[:]
                    random.shuffle(joueurs_melanges)
                    nouveau_tour_nom = f"Tour {len(tournoi_obj.tours) + 1}"
                    nouveau_tour = Tour(nouveau_tour_nom, joueurs_melanges)
                    nouveau_tour.commencer()
                    tournoi_obj.ajouter_tour(nouveau_tour)
                    self.enregistrer_tournoi(tournoi_obj.to_dict())
                    self.view.afficher_message(f"=== Matchs de {nouveau_tour.nom} ===")
                    for match in nouveau_tour.matchs:
                        self.view.afficher_match(nouveau_tour.nom, match.joueur1, match.joueur2)
                else:
                    # Afficher les matchs restants du dernier tour
                    self.view.afficher_message("Matchs en cours :")
                    for match in dernier_tour.matchs:
                        if match.resultat is None:
                            self.view.afficher_match(dernier_tour.nom, match.joueur1, match.joueur2)
        else:
            self.view.afficher_erreur("Tournoi non trouvé.")

    def enregistrer_joueur(self, joueur):
        joueur_data = joueur.to_dict()
        try:
            with open(self.joueurs_path, 'r') as f:
                joueurs = json.load(f)
        except FileNotFoundError:
            joueurs = []

        joueurs.append(joueur_data)
        
        with open(self.joueurs_path, 'w') as f:
            json.dump(joueurs, f, indent=4)

    def charger_joueurs_inscrits(self):
        try:
            with open(self.joueurs_path, 'r') as f:
                joueurs = json.load(f)
            return joueurs
        except FileNotFoundError:
            return []

    def enregistrer_tournoi(self, tournoi_data):
     try:
        # Charger les tournois existants
        tournois = self.charger_tous_les_tournois()
        
        # Supprimer les anciens tournois avec le même nom
        tournois = [t for t in tournois if t['nom'] != tournoi_data['nom']]
        
        # Ajouter le nouveau tournoi
        tournois.append(tournoi_data)
        
        # Enregistrer les tournois mis à jour dans le fichier
        with open(self.tournois_path, 'w') as f:
            json.dump(tournois, f, indent=4)
            
     except Exception as e:
        self.view.afficher_erreur(f"Erreur lors de l'enregistrement du tournoi : {e}")


    def charger_tous_les_tournois(self):
     try:
        with open(self.tournois_path, 'r') as f:
            tournois = json.load(f)
        return tournois
     except FileNotFoundError:
         return []
     except json.JSONDecodeError as e:
        self.view.afficher_erreur(f"Erreur lors de la lecture du fichier de tournois : {e}")
        return []

    def afficher_joueurs_disponibles(self):
        joueurs_disponibles = self.charger_joueurs_inscrits()
        if joueurs_disponibles:
            self.view.afficher_message("Joueurs disponibles pour inscription :")
            for joueur in joueurs_disponibles:
                self.view.afficher_joueur_disponible(joueur)
        else:
            self.view.afficher_message("Aucun joueur disponible pour inscription.")
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































