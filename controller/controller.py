import json
import os
import random
from datetime import datetime
from models.models import Joueur, Tournoi, Tour, Match
from view.view import View

class Controller:
    def __init__(self, model, view):
        self.model = model
        self.view = view
        self.joueurs_path = os.path.join('data', 'Données_des_Participants.json')
        self.tournois_path = os.path.join('data', 'tournois.json')
        # Assurez-vous que les dossiers existent
        os.makedirs(os.path.dirname(self.joueurs_path), exist_ok=True)
        os.makedirs(os.path.dirname(self.tournois_path), exist_ok=True)

    def run(self):
        while True:
            self.view.afficher_menu_principal()
            choix = input("Entrez le numéro de votre choix : ")
            
            if choix == "1":
                self.creer_tournoi()
            elif choix == "2":
                self.ajouter_joueur()
            elif choix == "3":
                self.afficher_tous_les_joueurs()
            elif choix == "4":
                self.afficher_tous_les_tournois()
            elif choix == "5":
                self.lancer_tournoi()
            elif choix == "6":
                self.view.afficher_message("Merci d'avoir utilisé l'application de gestion des tournois d'échecs ! Au revoir !")
                break
            else:
                self.view.afficher_erreur("Choix invalide. Veuillez entrer un numéro valide.")
                
    def creer_tournoi(self):
     self.view.afficher_message("Création d'un nouveau tournoi")
     nom = input("Nom du tournoi : ")
     lieu = input("Lieu du tournoi : ")

    # Gestion de la saisie de la date de début
     while True:
        try:
            date_debut_str = input("Date de début (format JJ/MM/AAAA) : ")
            date_debut = datetime.strptime(date_debut_str, '%d/%m/%Y')
            break
        except ValueError:
            self.view.afficher_erreur("Format de date invalide. Veuillez entrer la date au format JJ/MM/AAAA.")

    # Gestion de la saisie de la date de fin
     while True:
        try:
            date_fin_str = input("Date de fin (format JJ/MM/AAAA) : ")
            date_fin = datetime.strptime(date_fin_str, '%d/%m/%Y')
            if date_fin < date_debut:
                self.view.afficher_erreur("La date de fin ne peut pas être antérieure à la date de début. Veuillez entrer une nouvelle date de fin.")
            else:
                break
        except ValueError:
            self.view.afficher_erreur("Format de date invalide. Veuillez entrer la date au format JJ/MM/AAAA.")

     description = input("Description du tournoi : ")
     nombre_tours = 4  # Exemple : 4 tours, vous pouvez le rendre dynamique si nécessaire

     tournoi = Tournoi(nom, lieu, date_debut, date_fin, nombre_tours, description)

    # Affichage et ajout des joueurs
     joueurs_disponibles = self.charger_joueurs_inscrits()  # Correction ici
     self.view.afficher_message("Joueurs disponibles pour inscription :")
     for joueur in joueurs_disponibles:
        self.view.afficher_joueur_disponible(joueur)

     while True:
        matricule = input("Entrez le matricule du joueur à ajouter (ou '0' pour arrêter d'ajouter des joueurs) : ")
        if matricule == '0':
            break
        joueur = next((j for j in joueurs_disponibles if j['matricule'] == matricule), None)
        if joueur:
            tournoi.ajouter_joueur(Joueur.from_dict(joueur))
        else:
            self.view.afficher_erreur("Joueur non trouvé.")

     self.enregistrer_tournoi(tournoi.to_dict())
     self.view.afficher_message("Tournoi créé avec succès.")


    def ajouter_joueur(self):
     nom = input("Nom du joueur : ")
     prenom = input("Prénom du joueur : ")
     date_naissance_str = input("Date de naissance (format JJ/MM/AAAA) : ")
     date_naissance = datetime.strptime(date_naissance_str, '%d/%m/%Y')

     while True:
        matricule = input("Matricule du joueur (deux lettres majuscules suivies de cinq chiffres) : ")
        if Joueur.validate_matricule(matricule):
            if not self.matricule_existe(matricule):
                break
            else:
                self.view.afficher_erreur("Le matricule existe déjà. Veuillez entrer un matricule unique.")
        else:
            self.view.afficher_erreur("Matricule invalide. Veuillez entrer un matricule valide au format XX00000.")

     joueur = Joueur(nom, prenom, date_naissance, matricule)
     self.enregistrer_joueur(joueur)
     self.view.afficher_message(f"Joueur {prenom} {nom} ajouté avec succès!")

     
    def matricule_existe(self, matricule):
        """Vérifie si un matricule existe déjà dans la liste des joueurs."""
        joueurs = self.charger_joueurs_inscrits()
        return any(joueur['matricule'] == matricule for joueur in joueurs)

    def afficher_tous_les_joueurs(self):
        joueurs = self.charger_joueurs_inscrits()
        self.view.afficher_tous_les_joueurs(joueurs)

    def afficher_tous_les_tournois(self):
        tournois = self.charger_tous_les_tournois()
        self.view.afficher_tous_les_tournois(tournois)

    def lancer_tournoi(self):
     tournois = self.charger_tous_les_tournois()
     self.view.afficher_tous_les_tournois(tournois)
 
     nom_tournoi = input("Entrez le nom du tournoi à lancer : ")
     tournoi_data = next((t for t in tournois if t['nom'] == nom_tournoi), None)

     if tournoi_data:
        tournoi_obj = Tournoi.from_dict(tournoi_data)
        self.view.afficher_message(f"Lancement du tournoi : {tournoi_obj.nom}")

        if len(tournoi_obj.tours) == 0:
            # Mélanger les joueurs avant de commencer
            joueurs_melanges = tournoi_obj.joueurs_inscrits[:]
            random.shuffle(joueurs_melanges)
            self.view.afficher_message("Joueurs mélangés :")
            for joueur in joueurs_melanges:
                self.view.afficher_joueur_disponible(joueur.to_dict())

            # Créer les matchs pour le tournoi round-robin
            matchs = self.creer_matchs_round_robin(joueurs_melanges)
            matchs_par_tour = 2  # Par exemple, 2 matchs par tour
            tours = self.diviser_matchs_en_tours(matchs, matchs_par_tour)
            
            for tour in tours:
                tournoi_obj.ajouter_tour(tour)

            self.enregistrer_tournoi(tournoi_obj.to_dict())
            self.view.afficher_message("=== Matchs du tournoi ===")
            for tour in tournoi_obj.tours:
                self.view.afficher_message(f"=== {tour.nom} ===")
                for match in tour.matchs:
                    self.view.afficher_match(tour.nom, match)
        else:
            # Reprendre le tournoi en cours
            dernier_tour = tournoi_obj.tours[-1]

            # Vérifiez si tous les matchs du dernier tour ont un résultat
            if all(match.resultat is not None for match in dernier_tour.matchs):
                self.view.afficher_message("Tous les matchs sont terminés.")
            else:
                self.view.afficher_message("Matchs en cours :")
                for match in dernier_tour.matchs:
                    if match.resultat is None:
                        self.view.afficher_match(dernier_tour.nom, match)
        
        # Demander quel match lancer
        while True:
            choix_tour = input("Entrez le numéro du tour à lancer (ou 'q' pour quitter) : ")
            if choix_tour.lower() == 'q':
                break

            try:
                choix_tour = int(choix_tour) - 1
                tour = tournoi_obj.tours[choix_tour]

                choix_match = input(f"Entrez le numéro du match du {tour.nom} à lancer : ")
                choix_match = int(choix_match) - 1

                if 0 <= choix_match < len(tour.matchs):
                    self.lancer_match(tour, choix_match)
                else:
                    self.view.afficher_erreur("Numéro de match invalide.")
            except (ValueError, IndexError):
                self.view.afficher_erreur("Choix invalide.")
     else:
        self.view.afficher_erreur("Tournoi non trouvé.")


    def creer_matchs_round_robin(self, joueurs):
     matchs = []
     nombre_joueurs = len(joueurs)
     for i in range(nombre_joueurs):
        for j in range(i + 1, nombre_joueurs):
            matchs.append(Match(joueurs[i], joueurs[j]))
     return matchs

    
    def diviser_matchs_en_tours(self, matchs, matchs_par_tour):
     tours = []
     nombre_de_tours = (len(matchs) + matchs_par_tour - 1) // matchs_par_tour  # Calculer le nombre de tours nécessaires

     for i in range(nombre_de_tours):
        debut = i * matchs_par_tour
        fin = min((i + 1) * matchs_par_tour, len(matchs))
        tour = Tour(f"Tour {i + 1}", [])  # Nommer automatiquement les tours
        tour.matchs = matchs[debut:fin]

        # Automatiser les numéros des matchs
        for j, match in enumerate(tour.matchs):
            match.numero = j + 1

        tours.append(tour)
     return tours


    def creer_matchs_avec_bye(self, tour):
     joueurs = tour.joueurs[:]
     matchs = []
     while joueurs:
        if len(joueurs) % 2 == 1:
            # Si le nombre de joueurs est impair, attribuer un bye
            joueur1 = joueurs.pop(0)
            matchs.append(Match(joueur1, None))  # Match avec bye
            self.view.afficher_message(f"{joueur1.prenom} {joueur1.nom} passe automatiquement au tour suivant")
        else:
            # Créer les matchs pour les joueurs restants
            joueur1 = joueurs.pop(0)
            joueur2 = joueurs.pop(0)
            matchs.append(Match(joueur1, joueur2))
     tour.matchs = matchs
     
    def lancer_match(self, tour, match_index):
     match = tour.matchs[match_index]
     match.lancer()
     self.view.afficher_match(tour.nom, match, lancer=True)
     
    def enregistrer_joueur(self, joueur):
     joueur_data = joueur.to_dict()
     try:
        with open(self.joueurs_path, 'r') as f:
            try:
                joueurs = json.load(f)
            except json.JSONDecodeError:
                joueurs = []  # Si le fichier est corrompu, initialiser avec une liste vide
     except FileNotFoundError:
        joueurs = []

     joueurs.append(joueur_data)

     with open(self.joueurs_path, 'w') as f:
        json.dump(joueurs, f, indent=4)

    def charger_joueurs_inscrits(self):
        try:
            with open(self.joueurs_path, 'r') as f:
                joueurs = json.load(f)
            return joueurs
        except FileNotFoundError:
            return []

    def enregistrer_tournoi(self, tournoi_data):
     try:
        # Charger les tournois existants
        tournois = self.charger_tous_les_tournois()
        
        # Supprimer les anciens tournois avec le même nom
        tournois = [t for t in tournois if t['nom'] != tournoi_data['nom']]
        
        # Ajouter le nouveau tournoi
        tournois.append(tournoi_data)
        
        # Enregistrer les tournois mis à jour dans le fichier
        with open(self.tournois_path, 'w') as f:
            json.dump(tournois, f, indent=4)
            
     except Exception as e:
        self.view.afficher_erreur(f"Erreur lors de l'enregistrement du tournoi : {e}")


    def charger_tous_les_tournois(self):
     try:
        with open(self.tournois_path, 'r') as f:
            tournois = json.load(f)
        return tournois
     except FileNotFoundError:
         return []
     except json.JSONDecodeError as e:
        self.view.afficher_erreur(f"Erreur lors de la lecture du fichier de tournois : {e}")
        return []

    def afficher_joueurs_disponibles(self):
        joueurs_disponibles = self.charger_joueurs_inscrits()
        if joueurs_disponibles:
            self.view.afficher_message("Joueurs disponibles pour inscription :")
            for joueur in joueurs_disponibles:
                self.view.afficher_joueur_disponible(joueur)
        else:
            self.view.afficher_message("Aucun joueur disponible pour inscription.")



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































